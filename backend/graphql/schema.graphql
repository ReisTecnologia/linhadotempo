"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type User {
    id: ID!
    name: String!
    email: String!
    type: String!
    created_at: DateTime!
    updated_at: DateTime!
    timelines: [Timeline] @hasMany
    hash_users: [HashUser] @hasMany
}

type HashUser {
    id: ID!
    hash_id: String!
    expiry_date: DateTime!
    user_id: String!
    user: User @belongsTo
}

type Timeline {
    id: ID!
    name: String!
    color: String
    initials: String
    timelineIconImageUrl: String
    time_entries: [TimeEntry] @belongsToMany
    timeline_categories: [TimelineCategory] @belongsToMany
    user_id: String
    user: User @belongsTo
}

type TimeEntry {
    id: ID!
    name: String!
    description: String
    year: Int
    month: Int
    day: Int
    annual_importance: Boolean!
    monthly_importance: Boolean!
    image_url: String
    source_url: String
    book_page: Int
    book_id: String
    timelines: [Timeline] @belongsToMany
    book: Book @belongsTo
}

type Book {
    id: ID!
    book_name: String!
    author: String
    edition: String
    publisher: String
    publishing_year: Int
    time_entries: [TimeEntry] @hasMany
    user_id: String
    user: User @belongsTo
}

type TimelineCategory {
    id: ID!
    name: String!
    timelines: [Timeline] @belongsToMany
    user_id: String
    user: User @belongsTo
}

type Settings {
    bucket_name: String
}

type LoginResponse {
    token: String
    success: Boolean!
    message: String!
}

type LogoutResponse {
    success: Boolean!
    message: String!
}

type DeleteUserResponse {
    success: Boolean!
    message: String!
}

type AddHashUserResponse {
    message: String!
    success: Boolean!
}

type DeleteTimelineResponse {
    message: String!
    success: Boolean!
}

type DeleteBookResponse {
    message: String!
    success: Boolean!
}

input CreateTimeEntryInput {
    name: String!
    description: String
    year: Int
    month: Int
    day: Int
    annual_importance: Boolean!
    monthly_importance: Boolean!
    image_url: String
    source_url: String
    book_page: Int
    book_id: String
    timelines: CreateTimelineBelongsToMany!
}

input CreateBookInput {
    book_name: String!
    author: String
    edition: String
    publisher: String
    publishing_year: Int
}

input UpdateBookInput {
    book_name: String
    author: String
    edition: String
    publisher: String
    publishing_year: Int
}

input CreateTimelineBelongsToMany {
    sync: [ID!]
}

input AddHashUserInput {
    email: String!
}

input UpdateTimeEntryInput {
    name: String
    description: String
    year: Int
    month: Int
    day: Int
    annual_importance: Boolean
    monthly_importance: Boolean
    image_url: String
    source_url: String
    book_page: Int
    book_id: String
    timelines: UpdateTimelineBelongsToMany!
}

input UpdateTimelineBelongsToMany {
    sync: [ID!]
}

input CreateUserInput {
    name: String!
    email: String! @rules(apply: ["unique:users,email"])
    password: String! @hash
    type: String!
}
input UpdateUserInput {
    name: String!
    email: String! @rules(apply: ["unique:users,email"])
    type: String!
}
input UpdatePasswordInput {
    password: String! @hash
}
input LoginInput {
    email: String!
    password: String!
}
input CreateTimelineInput {
    name: String!
    color: String
    initials: String
    timelineIconImageUrl: String
    timeline_categories: CreateCategoryBelongsToMany
}

input CreateCategoryBelongsToMany {
    sync: [ID!]
}

input UpdateTimelineInput {
    name: String
    color: String
    initials: String
    timelineIconImageUrl: String
    timeline_categories: UpdateCategoryBelongsToMany
}

input UpdateCategoryBelongsToMany {
    sync: [ID!]
}

input CreateTimelineCategoryInput {
    name: String!
}

input UpdateTimelineCategoryInput {
    name: String!
}

type Query {
    books: [Book!]! @all @whereAuth(relation: "user")
    book(id: ID! @eq): Book! @find @whereAuth(relation: "user")
    timeline_categories: [TimelineCategory!]! @all @whereAuth(relation: "user")
    timeline_category(id: ID! @eq): TimelineCategory
        @find
        @whereAuth(relation: "user")
    users: [User!]! @all
    user(id: ID! @eq): User @find
    hashUser(hash_id: String!): HashUser
        @field(resolver: "App\\GraphQL\\Queries\\QueryHashUser")
    me: User @auth
    timelines: [Timeline!]! @all @whereAuth(relation: "user")
    timeline(id: ID @eq): Timeline @find @whereAuth(relation: "user")
    time_entries(timeline_ids: [ID]): [TimeEntry]
    time_entry(id: ID! @eq): TimeEntry @find
    settings: Settings!
}

type Mutation {
    login(input: LoginInput! @spread): LoginResponse!
    logout: LogoutResponse! @guard
    createBook(input: CreateBookInput! @spread): Book!
        @create
        @inject(context: "user.id", name: "user_id")
    updateBook(id: ID!, input: UpdateBookInput! @spread): Book! @update
    deleteBook(id: ID!): DeleteBookResponse!
    createTimelineCategory(
        id: ID
        input: CreateTimelineCategoryInput! @spread
    ): TimelineCategory! @upsert @inject(context: "user.id", name: "user_id")
    updateTimelineCategory(
        id: ID!
        input: UpdateTimelineCategoryInput! @spread
    ): TimelineCategory! @update
    deleteTimelineCategory(id: ID!): TimelineCategory! @delete
    createTimeline(input: CreateTimelineInput! @spread): Timeline!
        @create
        @inject(context: "user.id", name: "user_id")
    updateTimeline(id: ID!, input: UpdateTimelineInput! @spread): Timeline
        @update
    deleteTimeline(id: ID!): DeleteTimelineResponse!
    createTimeEntry(input: CreateTimeEntryInput! @spread): TimeEntry @create
    deleteTimeEntry(id: ID!): TimeEntry @delete
    updateTimeEntry(id: ID!, input: UpdateTimeEntryInput! @spread): TimeEntry
        @update
    createUser(input: CreateUserInput! @spread): User! @create
    addHashUser(input: AddHashUserInput! @spread): AddHashUserResponse!
    updateUser(id: ID!, input: UpdateUserInput! @spread): User! @update
    updatePassword(id: ID!, input: UpdatePasswordInput! @spread): User! @update
    deleteUser(id: ID!): DeleteUserResponse!
}
