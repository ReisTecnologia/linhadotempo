"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type User {
    id: ID!
    name: String!
    email: String!
    type: String!
    created_at: DateTime!
    updated_at: DateTime!
    timelines: [Timeline] @hasMany
}

type Timeline {
    id: ID!
    name: String!
    time_entries: [TimeEntry] @hasMany
    user_id: String
    user: User @belongsTo
}

type TimeEntry {
    id: ID!
    name: String!
    year: Int!
    month: Int
    day: Int
    annual_importance: Boolean!
    monthly_importance: Boolean!
    timeline_id: String
    timeline: Timeline @belongsTo
}

type LoginResponse {
    token: String
    success: Boolean!
    message: String!
}

type LogoutResponse {
    success: Boolean!
    message: String!
}

input CreateTimeEntryInput {
    name: String!
    year: Int!
    month: Int
    day: Int
    annual_importance: Boolean!
    monthly_importance: Boolean!
    timeline_id: String
}

input UpdateTimeEntryInput {
    name: String
    year: Int
    month: Int
    day: Int
    annual_importance: Boolean
    monthly_importance: Boolean
    timeline_id: String
}

input CreateUserInput {
    name: String!
    email: String!
        @rules(
            apply: ["unique:users,email"]
            messages: [{ rule: "unique", message: "Email is already in use" }]
        )
    password: String! @hash
    type: String!
}
input UpdateUserInput {
    name: String!
    email: String!
    type: String!
}
input LoginInput {
    email: String!
    password: String!
}
input CreateTimeLineInput {
    name: String!
}

input UpdateTimelineInput {
    name: String
}
input UpdatePasswordInput {
    password: String! @hash
}

type Query {
    users: [User!]! @all
    user(id: ID! @eq): User @find
    me: User @auth
    timelines: [Timeline!]! @all @whereAuth(relation: "user")
    timeline(id: ID @eq): Timeline @find @whereAuth(relation: "user")
    time_entries: [TimeEntry] @all
    time_entry(id: ID! @eq): TimeEntry @find
}

type Mutation {
    login(input: LoginInput! @spread): LoginResponse!
    logout: LogoutResponse! @guard
    createTimeline(input: CreateTimeLineInput! @spread): Timeline!
        @create
        @inject(context: "user.id", name: "user_id")
    updateTimeline(id: ID!, input: UpdateTimelineInput! @spread): Timeline
        @update
    deleteTimeline(id: ID!): Timeline @delete
    createTimeEntry(input: CreateTimeEntryInput! @spread): TimeEntry @create
    deleteTimeEntry(id: ID!): TimeEntry @delete
    updateTimeEntry(id: ID!, input: UpdateTimeEntryInput! @spread): TimeEntry
        @update
    createUser(input: CreateUserInput! @spread): User! @create
    updateUser(id: ID!, input: UpdateUserInput! @spread): User! @update
    updatePassword(id: ID!, input: UpdatePasswordInput! @spread): User! @update
}
